<?php

/*
*
* menu call for url call back as module identification
*
*/

function mymodule_menu() {

    $items = array();

    $items['my_module/hello_world'] = array(
        'title' => 'Cookies  UI accordion',
        'page callback' => 'say_hello_world',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
     );

    $items['my_module/civicrm_buildForm'] = array(
        'title' => 'build form Test',
        'page callback' => 'civicrm_buildForm',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
     );

      $items['add/%ctools_js/review'] = array(
	   'page callback'    => 'mymodule_ctools_modal_review',
	   'page arguments'   => array(1),
	   'access arguments' => array('create review content'),
                  );
    return $items;
   }

      /**
       * Set a default value for an event price set field.
       */
      function mymodule_civicrm_buildForm($formName, &$form)
      {
   
       // $form_test = $form->assign('intro_text', ts('hello world'));

        //var_dump($form_test);
         if( $formName == 'CRM_Number_Form_InNumber' )
         {
           //echo "Text Feild";
         }
	 if ($formName == 'CRM_Event_Form_Registration_Register') {
           if ($form->getAction() == CRM_Core_Action::ADD) {
            $defaults['price_3'] = '710';
             $form->setDefaults($defaults);
          }
        }
      }
        /*
        *menu url call back Url hello_world
        *
        */
        function say_hello_world() {

            drupal_add_js(drupal_get_path('module', 'mymodule') . '/jquery.cookie.js');
            drupal_add_js(drupal_get_path('module', 'mymodule') . '/jquery-1.2.3.min.js');

            $vars = array();
            $vars['type'] ="ul";
            $vars['title'] = "";
            $vars['attributes'] = array("");
            $vars['items'][0]="<div id='leftCol'><div class='collapseLeft'>Show_2</div><div class='expandLeft'style='display:none' >TEsting Hidde _1</div></div><div id='rightCol'><div class='collapseRight'>Show2</div><div class='expandRight'>Testing Hidde _2</div></div>";
            $vars['items'][1] = "<div id='leftCol'><a href='#' id='link' onclick='toggle_visibility('foo');' >Click here to toggle visibility of element #foo</a><div id='foo' style='display: none;'>This is foo</div></div><br/><div id='rightCol'><a href='#' onclick='toggle_visibility_div2('foo1');' id='link1'>Click here to toggle visibility of element #foo</a><div id='foo1' style='display: none;'>This is foo NO 2</div></div><br/><div id='Colast'>
<a href='#' onclick='toggle_visibility_div3('foo2');' id='link2'>Click here to toggle visibility of element #foo</a><div id='foo2' style='display: none;'>This is foo NO 2</div></div>";
            return theme_item_list($vars);
        }
   /*
     *
     * validate form in civicrm
   */

    /*sample implementation*/


 /*
 *
 *Post Process Hook for the form submit call in civicrm
 *
 */
    function mymodule_civicrm_postProcess( $formName ,&$fields) {

       if( $formName == 'CRM_Mypage_Form_MyForm' ) {

       
       
       if( $formName == 'CRM_Number_Form_InNumber' )	{
      
		       	    $inID = $fields->getVar('_submitValues');
	       		    
						$in = $fields->getElement('in')->getValue();
					
							$entity_id = $fields->getElement('entity_id')->getValue();
				 

						   $query = "INSERT INTO training_ni ( inno,entity_id  ) VALUES ( '$in','$entity_id' )";
					  	   
							 /*	   
						                 executeQuery	for ni table as ut work for storing new data into table
								 	             */
										     	  
													CRM_Core_DAO::executeQuery( $query );
										     
										              }	
											      
          return;									      
      }	  
}
      
          /*
          *civicrm_post for storing data into database
          */

  function mymodule_civicrm_post($op, $objectName, $objectId, &$objectRef)
   {




    }

    /*
    *
    * CRM_Mypage_Page_Tabset
    */


  function validate_innubers( $ninumbers )
  {
    switch ($i) {
    case 0:
        echo "i equals 0";
        break;
    case 1:
        echo "i equals 1";
        break;

       }
  }

/*
function mymodule_civicrm_custom( $formName, $op, $groupID, $entityID, &$params ) {

 if($formName = "CRM_Mypage_Form_Tabs"){

      if ( $op != 'create' && $op != 'edit' ) {

          return;
       }

     if ($groupID == 1) {

        $needs_update = false;
        $tableName = CRM_Core_DAO::getFieldValue( 'CRM_Core_DAO_CustomGroup',
                                                      $groupID,
                                                      'table_name' );


        $sql = "SELECT member_id_4 FROM $tableName WHERE entity_id = $entityID";
        $dao = CRM_Core_DAO::executeQuery( $sql, CRM_Core_DAO::$_nullArray );

        if (! $dao->fetch()) {

            $needs_update = true;

        }

        // Value may also be empty. i.e. delete the value in the interface to reset the field.
        if (! $dao->member_id_4) {

            $needs_update = true;

        }

        if ($needs_update) {

                $member_id = date('Y') . sprintf('%07d', $entityID);

                $sql = "UPDATE $tableName SET member_id_4 = $member_id WHERE entity_id = $entityID";
                CRM_Core_DAO::executeQuery( $sql, CRM_Core_DAO::$_nullArray );

          }
      }

    }
  }*/

	 
	/**
          * Implements hook_block_info().
	*/
	function example_block_info(){
	 $blocks['add_review'] = array(
	   'info' => t('Add review'),
	 );
	 return $blocks;
	}

?>